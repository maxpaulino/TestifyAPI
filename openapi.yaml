openapi: 3.0.3
info:
  title: Testify API
  description: An API for generating and managing multiple-choice questions
  version: 1.0.3
servers:
  - url: http://localhost:5000
paths:
  /questions:
    post:
      operationId: addQuestion
      summary: Add a multiple-choice question
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tag:
                  type: string
                  example: Science
                level:
                  type: string
                  example: B2
                number:
                  type: integer
                  example: 2
      responses:
        "200":
          description: Question added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Question added successfully
    get:
      operationId: getAllQuestions
      summary: Get all questions
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  questions:
                    type: array
                    items:
                      $ref: "#/components/schemas/Question"
    delete:
      operationId: deleteDeniedQuestions
      summary: Delete denied questions
      responses:
        "200":
          description: Questions deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "3 questions with status 'denied' deleted successfully."
    get:
      operationId: getQuestion
      summary: Get question(s) by ID
      parameters:
    - in: query
      name: question_id
      required: true
      style: form
      schema:
        type: array
        items:
          type: string
      explode: true
      description: The ID(s) of the question(s)
    responses:
      "200":
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              questions:
                type: array
                items:
                  $ref: "#/components/schemas/Question"
      "404":
      description: Question(s) not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Question(s) not found.
    delete:
  operationId: deleteQuestion
  summary: Delete one or more questions by ID
  parameters:
    - in: body
      name: question_ids
      required: true
      schema:
        type: array
        items:
          type: string
      description: The IDs of the questions to delete
  responses:
    "200":
      description: Questions deleted successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Questions deleted successfully.
    "404":
      description: Question(s) not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Question(s) not found.
put:
  operationId: setQuestion
  summary: Update one or more questions by ID
  parameters:
    - in: body
      name: question_ids
      required: true
      schema:
        type: array
        items:
          type: string
      description: The IDs of the questions to update
    - in: path
      name: question_id
      required: false
      schema:
        type: string
      description: The ID of a single question to update
  requestBody:
    required: true
    content:
      application/json:
        schema:
          type: object
          properties:
            status:
              type: string
              example: approved
  responses:
    "200":
      description: Questions updated successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Questions updated successfully.
    "404":
      description: Question(s) not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Question(s) not found.
get:
  operationId: getTags
  summary: Get all tags
  responses:
    "200":
      description: Successful response
      content:
        application/json:
          schema:
            type: object
            properties:
              tags:
                type: array
                items:
                  type: string
                example: ['tag1', 'tag2', 'tag3']
    "404":
      description: Tags not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Tags not found.
    get:
  operationId: getQuestionsByTags
  summary: Get questions by tag
  parameters:
    - in: query
      name: tag
      required: true
      schema:
        type: string
      description: The tag to filter questions by
  responses:
    "200":
      description: Successful response
      content:
        application/json:
          schema:
            type: object
            properties:
              tags:
                type: array
                items:
                  type: string
                example: ['tag1', 'tag2', 'tag3']
    "404":
      description: Questions not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Questions not found.

components:
  schemas:
    Question:
      type: object
      properties:
        _id:
          type: string
        tag:
          type: string
        level:
          type: string
        prompt:
          type: string
        status:
          type: string
        revised:
          type: boolean
