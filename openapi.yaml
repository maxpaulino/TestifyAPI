openapi: 3.0.3
info:
  title: Testify API
  description: An API for generating and managing multiple-choice and true/false questions
  version: 1.0.3
servers:
  - url: http://localhost:5000
paths:
  /questions:
    post:
      operationId: create_questions
      summary: Create a questions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tag:
                  type: string
                  description: Tag of the question
                  example: cars
                level:
                  type: string
                  description: Level of the question
                  enum: [A1, A2, B1, B2, C1, C2]
                number:
                  type: integer
                  description: Number of questions
                  example: 2
                qType:
                  type: string
                  description: Type of question
                  enum: [multiple choice, true or false]
              required:
                - tag
                - level
                - number
                - qType
      responses:
        '200':
          description: The number of questions added
        '404':
          description: Invalid input data
    put:
      operationId: update_all_questions
      summary: Update all questions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                qType:
                  type: string
                  description: Type of question
                  enum: [multiple choice, true or false]
                status:
                  type: string
                  description: Status of the question
                  enum: [approved, denied]
      responses:
        '200':
          description: Status of all questions updated
        '404':
          description: No questions found
    delete:
      operationId: delete_all_questions
      summary: Delete all questions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                qType:
                  type: string
                  description: Type of question
                  enum: [multiple choice, true or false]
      responses:
        '200':
          description: Number of questions deleted
        '400':
          description: Invalid question type provided
        '404':
          description: Questions not found
  /questions/{qType}:
    get:
      operationId: get_all_questions
      summary: Get all questions
      parameters:
        - in: path
          name: qType
          schema:
            type: string
            description: Type of question
            enum: [multiple choice, true or false]
          required: true
      responses:
        '200':
          description: List of questions
        '404':
          description: No questions found
  /tags/{qType}:
    get:
      operationId: get_tags
      summary: Get tags
      parameters:
        - in: path
          name: qType
          schema:
            type: string
            description: Type of question
            enum: [multiple choice, true or false]
          required: true
      responses:
        '200':
          description: List of tags
        '400':
          description: Error retrieving tags
  /questions/id:
    post:
      operationId: get_questions_by_ids
      summary: Get questions by IDs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question_ids:
                  type: array
                  items:
                    type: string
                    description: ID of a question
                    example: "5f2b39035b71272a7b2c5d2e"

      responses:
        '200':
          description: Questions retrieved by IDs
        '400':
          description: No question IDs provided
        '404':
          description: No questions found
    put:
      operationId: update_question_by_ids
      summary: Update questions by IDs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: Status of the question
                  enum: [approved, denied]
                question_ids:
                  type: array
                  items:
                    type: string
                    description: ID of a question
                    example: "5f2b39035b71272a7b2c5d2e"
      responses:
        '200':
          description: Number of questions updated
        '404':
          description: No questions found
    delete:
      operationId: delete_questions_be_ids
      summary: Delete questions by IDs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question_ids:
                  type: array
                  items:
                    type: string
                    description: ID of a question
                    example: "5f2b39035b71272a7b2c5d2e"
      responses:
        '200':
          description: Questions deleted successfully
        '404':
          description: Questions not found
  /questions/tag/{tag}/{qType}:
    get:
      operationId: get_questions_by_tag
      summary: Get questions by tag
      parameters:
        - in: path
          name: tag
          schema:
            type: string
            description: Tag of the questions
            example: cars
          required: true
        - in: path
          name: qType
          schema:
            type: string
            description: Type of question
            enum: [multiple choice, true or false]
          required: true
      responses:
        '200':
          description: List of questions
        '400':
          description: Tag parameter is missing
        '404':
          description: No questions found with the specified tag
  /questions/tag:
    put:
      operationId: update_questions_by_tag
      summary: Update questions by tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tag:
                  type: string
                  description: Tag of the questions
                  example: cars
                qType:
                  type: string
                  description: Type of question
                  enum: [multiple choice, true or false]
                status:
                  type: string
                  description: Status of the question
                  enum: [approved, denied]
      responses:
        '200':
          description: All questions updated
        '400':
          description: Tag parameter is missing
        '404':
          description: No questions found with the specified tag
    delete:
      operationId: delete_questions_by_tag
      summary: Delete questions by tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tag:
                  type: string
                  description: Tag of the questions
                  example: cars                
                qType:
                  type: string
                  description: Type of question
                  enum: [multiple choice, true or false]
      responses:
        '200':
          description: Questions deleted successfully
        '400':
          description: Tag parameter is missing
        '404':
          description: Questions not found
