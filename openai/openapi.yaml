openapi: 3.0.3
info:
  title: Testify API
  description: An API for generating and managing multiple-choice questions
  version: 1.0.3
servers:
  - url: http://localhost:5000
paths:
  /questions:
    post:
      operationId: add_questions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionInput'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
    put:
      operationId: update_all_questions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionInput'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
    delete:
      operationId: delete_all_questions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionInput'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /questions/{qType}:
    get:
      operationId: get_all_questions
      parameters:
        - name: qType
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
  /tags/{qType}:
    get:
      operationId: get_tags
      parameters:
        - name: qType
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /questions/id:
    post:
      operationId: get_questions_by_ids
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question_ids:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
    put:
      operationId: update_questions_by_ids
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [approved, denied]
                question_ids:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
    delete:
      operationId: delete_questions_by_ids
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question_ids:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /questions/tag/{tag}/{qType}:
    get:
      parameters:
        - name: tag
          in: path
          required: true
          schema:
            type: string
        - name: qType
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
  /questions/tag:
    put:
      operationId: update_questions_by_tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionInput'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
    delete:
      operationId: delete_questions_by_tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionInput'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
components:
  schemas:
    Question:
      type: object
      required:
        - _id
        - tag
        - level
        - prompt
        - status
        - revised
      properties:
        _id:
          type: string
          description: The unique identifier for the question
          example: "5f2b39035b71272a7b2c5d2e"
        tag:
          type: string
          description: The category or topic of the question
          example: "Science"
        level:
          type: string
          description: The difficulty level of the question
          example: "B2"
        prompt:
          type: string
          description: The question text
          example: "What is the chemical symbol for Hydrogen?"
        status:
          type: string
          description: The status of the question (e.g., approved, denied, pending)
          example: "approved"
        revised:
          type: boolean
          description: Indicates whether the question has been revised
          example: false
    QuestionInput:
      type: object
      required:
        - tag
        - level
        - number
        - qType
      properties:
        tag:
          type: string
          description: The category or topic of the question
          example: "Science"
        level:
          type: string
          description: The difficulty level of the question
          example: "B2"
        number:
          qType: integer
          description: The number of questions
          example: 2
        type:
          type: array
          description: Type of questions
          example: [multiple_choice, true_or_false]
        
    Message:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: A message about the result of the operation
          example: "Question added successfully"


